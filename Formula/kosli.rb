# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Kosli < Formula
  desc "CLI client for reporting compliance events to  https://kosli.com"
  homepage "https://kosli.com/"
  version "2.0.0-rc1"
  license "MIT"

  depends_on "go"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/kosli-dev/cli/releases/download/v2.0.0-rc1/kosli_2.0.0-rc1_darwin_amd64.tar.gz"
      sha256 "3308bb94d343ea886a9a5c76dc5b5ddeec8e714fafbf56102235416769c6c466"

      def install
        bin.install "kosli"
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/kosli-dev/cli/releases/download/v2.0.0-rc1/kosli_2.0.0-rc1_darwin_arm64.tar.gz"
      sha256 "da13f10cb10458ec2adc6df78de821744a7a92123d51b2109642d8ec8b93d6a3"

      def install
        bin.install "kosli"
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/kosli-dev/cli/releases/download/v2.0.0-rc1/kosli_2.0.0-rc1_linux_arm64.tar.gz"
      sha256 "db768845180eafff20ea85be19d309d33aa6b70aa76b7b4832bda63396d0abb6"

      def install
        bin.install "kosli"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/kosli-dev/cli/releases/download/v2.0.0-rc1/kosli_2.0.0-rc1_linux_amd64.tar.gz"
      sha256 "b2868f7a375fcc57300bb5f51215d533123b92f6324c350cb743a46a189f74f8"

      def install
        bin.install "kosli"
      end
    end
    if Hardware::CPU.arm? && !Hardware::CPU.is_64_bit?
      url "https://github.com/kosli-dev/cli/releases/download/v2.0.0-rc1/kosli_2.0.0-rc1_linux_armv6.tar.gz"
      sha256 "dfab5726f4fa5a86f26bcbfaaf316e23bcb87afa39590581a86cf292465fb249"

      def install
        bin.install "kosli"
      end
    end
  end

  test do
    system "#{bin}/kosli", "version"
    version_output = shell_output(bin/"kosli version 2>&1")
    assert_match "GitTreeState:\"clean\"", version_output

    if build.stable?
      revision = stable.specs[:revision]
      assert_match "GitCommit:\"#{revision}\"", version_output
      assert_match "Version:\"v#{version}\"", version_output
    end
  end
end
